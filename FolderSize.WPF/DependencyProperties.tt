
/* ****************************************************************************
 *
 * Copyright (c) Mårten Rånge.
 *
 * This source code is subject to terms and conditions of the Microsoft Public License. A 
 * copy of the license can be found in the License.html file at the root of this distribution. If 
 * you cannot locate the  Microsoft Public License, please send an email to 
 * dlr@microsoft.com. By using this source code in any fashion, you are agreeing to be bound 
 * by the terms of the Microsoft Public License.
 *
 * You must not remove this notice, or any other, from this software.
 *
 *
 * ***************************************************************************/

<#@ template language="C#v3.5" extension=".cs" hostspecific="true" #> 
<#@ assembly name="WindowsBase.dll" #>
<#@ assembly name="PresentationCore.dll" #>
<#@ assembly name="System.Core.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.CodeDom" #>
<#@ import namespace="System.CodeDom.Compiler" #>
<#@ import namespace="System.Windows.Media" #>
<#@ import namespace="System.Collections.ObjectModel" #>
<#@ import namespace="System.IO" #>
using System.Windows;
using System.Windows.Input;
using FolderSize.Common;

// Do not edit this file. It's auto generated. Changes will be overwritten
// If you need to change it change the template file: <#=Path.GetFileName(Host.TemplateFile)#>

// These classes are intended to extend already existing classes with DependencyProperties 
// DependencyProperties are aweseome to use but a pain to maintain and write
<#
   var dots = new []
      {
         new DependencyObjectTemplate
         {
            Namespace = "FolderSize.WPF",
            Name = "FolderTree",
            Properties = new []
               {
                  D.Create("DisplayMode", "FolderTreeDisplayMode", "FolderTreeDisplayMode.Size", DependencyPropertyFlags.None),
                  D.Create("DisplayModes", "FolderTreeDisplayMode[]", "GetDefaultDisplayModes ()" , DependencyPropertyFlags.IsReadOnly),
                  D.Create("Job", "FolderTraverserJob", "null" , DependencyPropertyFlags.None),
                  D.Create("Path", "string", "\".\"" , DependencyPropertyFlags.None),
                  D.Create("ProgressInfo", "string", "\"FolderSize.WPF\"" , DependencyPropertyFlags.IsReadOnly),
               },
            Commands = new []
               {
                  C.Create("Go"),
                  C.Create("Stop"),
               },
         },
      };
   foreach(var dot in dots)
   {#>
namespace <#=dot.Namespace#>
{
   partial class <#=dot.Name#> <#=dot.Base != null ? (" : " + dot.Base) : ""#>
   {
   
<#
   foreach(var dc in dot.Commands)
   {
#>

   partial void OnCanExecute<#=dc.Name#>CommandPartial (object parameter, ref bool canExecute);
   
   bool OnCanExecute<#=dc.Name#>Command (object parameter)
   {
      var canExecute = false;
   
      OnCanExecute<#=dc.Name#>CommandPartial (parameter, ref canExecute);
   
      return canExecute;
   }

   partial void OnExecute<#=dc.Name#>CommandPartial (object parameter);
   
   void OnExecute<#=dc.Name#>Command (object parameter)
   {
      OnExecute<#=dc.Name#>CommandPartial (parameter);
   }
   
   void RaiseCanExecute<#=dc.Name#>CommandChanged ()
   {
      if (m_cmd<#=dc.Name#> != null)
      {
         m_cmd<#=dc.Name#>.RaiseCanExecuteChanged (this);
      }
   }
   
   CustomCommand m_cmd<#=dc.Name#>;
   
   public ICommand <#=dc.Name#>Command
   {
      get
      {
         if (m_cmd<#=dc.Name#> == null)
         {
            m_cmd<#=dc.Name#> =
               new CustomCommand (
                  OnCanExecute<#=dc.Name#>Command,
                  OnExecute<#=dc.Name#>Command
               );
         }
         return m_cmd<#=dc.Name#>;
      }
   }
<#
   }
#>   
   
<#
   foreach(var dpt in dot.Properties)
   {  
      if (!dpt.IsReadOnly) 
      { #>
      public static readonly DependencyProperty <#=dpt.Name#>Property =
         DependencyProperty.Register(
            "<#=dpt.Name#>",
            typeof (<#=dpt.CompleteType#>),
            typeof (<#=dot.CompleteName#>),
            new PropertyMetadata(
               <#=dpt.DefaultValue ?? string.Format("default({0})", dpt.CompleteType)#>,
               On<#=dpt.Name#>PropertyChanged,
               On<#=dpt.Name#>PropertyCoerceValue)
            );
      
      partial void On<#=dpt.Name#>PropertyCoerceValuePartial(
         <#=dpt.CompleteType#> baseValue,
         ref <#=dpt.CompleteType#> newValue,
         ref bool isProcessed);
         
      static object On<#=dpt.Name#>PropertyCoerceValue(
         DependencyObject d,
         object baseValue)
      {
         var instance = (<#=dot.CompleteName#>)d;
         if (instance != null)
         {
            var bv = (<#=dpt.CompleteType#>)baseValue;
            var newValue = default(<#=dpt.CompleteType#>);
            var isProcessed = false;
            instance.On<#=dpt.Name#>PropertyCoerceValuePartial(
               bv,
               ref newValue,
               ref isProcessed);
            if (isProcessed)
            {
               return newValue;
            }
            else
            {
               return baseValue; 
            }
         }
         else
         {
            return baseValue;
         }
      }

      partial void On<#=dpt.Name#>PropertyChangedPartial(
         <#=dpt.CompleteType#> oldValue,
         <#=dpt.CompleteType#> newValue);
         
      static void On<#=dpt.Name#>PropertyChanged(
         DependencyObject d,
         DependencyPropertyChangedEventArgs e)
      {
         var instance = (<#=dot.CompleteName#>)d;
         var oldValue = (<#=dpt.CompleteType#>)e.OldValue;
         var newValue = (<#=dpt.CompleteType#>)e.NewValue;
         if( instance != null )
         {
            instance.On<#=dpt.Name#>PropertyChangedPartial(
               oldValue,
               newValue);
         }
      }
         
      /// <summary>
      /// Gets and sets <#=dpt.Name#>(<#=dpt.CompleteType#>) (this is a DependencyProperty)
      /// </summary>
      public <#=dpt.CompleteType#> <#=dpt.Name#>
      {
         get
         {
            return (<#=dpt.CompleteType#>)GetValue(<#=dpt.Name#>Property);
         }
         set
         {
            if( <#=dpt.Name#> != value )
            { 
               SetValue(
                  <#=dpt.Name#>Property,
                  value);
            }
         }
      }

<#    }
      else
      { #>
      static readonly DependencyPropertyKey <#=dpt.Name#>PropertyKey =
         DependencyProperty.RegisterReadOnly(
            "<#=dpt.Name#>",
            typeof (<#=dpt.CompleteType#>),
            typeof (<#=dot.CompleteName#>),
            new PropertyMetadata(
               <#=dpt.DefaultValue ?? string.Format("default({0})", dpt.CompleteType)#>
               ));

      public static DependencyProperty <#=dpt.Name#>Property =
         <#=dpt.Name#>PropertyKey.DependencyProperty;
         
      /// <summary>
      /// Gets <#=dpt.Name#>(<#=dpt.CompleteType#>) (this is a DependencyProperty)
      /// </summary>
      public <#=dpt.CompleteType#> <#=dpt.Name#>
      {
         get
         {
            return (<#=dpt.CompleteType#>)GetValue(<#=dpt.Name#>Property);
         }
         private set
         {
            if( <#=dpt.Name#> != value )
            { 
               SetValue(
                  <#=dpt.Name#>PropertyKey,
                  value);
            }
         
         }
      }
         
<#    } #>
<#    } #>
   }
}
<# } #>
<#+
   public static class C
   {
      public static DependencyCommandTemplate Create(string name)
      {
         return new DependencyCommandTemplate
            {
               Name = name,
            };
      }
   
   }
   
   public static class D
   {
      public static DependencyPropertyTemplate CreateCollection(
         string name,
         string typeName)
      {
         return new DependencyPropertyTemplate
         {
            Name = name,
            Type = typeName,
            IsCollection = true,
         };
      }
      
      public static DependencyPropertyTemplate Create(
         string name,
         string typeName)
      {
         return new DependencyPropertyTemplate
         {
            Name = name,
            Type = typeName,
         };
      }
      
      public static DependencyPropertyTemplate Create(
         string name,
         string typeName,
         string defaultValue)
      {
         return new DependencyPropertyTemplate
         {
            Name = name,
            Type = typeName,
            DefaultValue = defaultValue,
         };
      }

      public static DependencyPropertyTemplate Create(
         string name,
         string typeName,
         DependencyPropertyFlags flags)
      {
         return new DependencyPropertyTemplate
         {
            Name = name,
            Type = typeName,
            Flags = flags,
         };
      }
      
      public static DependencyPropertyTemplate Create(
         string name,
         string typeName,
         string defaultValue,
         DependencyPropertyFlags flags)
      {
         return new DependencyPropertyTemplate
         {
            Name = name,
            Type = typeName,
            DefaultValue = defaultValue,
            Flags = flags,
         };
      }

      public static DependencyPropertyTemplate Create<T>(
         string name)
      {
         return new DependencyPropertyTemplate
         {
            Name = name,
            Type = Support.GetCSDeclaration(typeof(T)),
         };
      }
      
      public static DependencyPropertyTemplate Create<T>(
         string name,
         T defaultValue)
      {
         return new DependencyPropertyTemplate
         {
            Name = name,
            Type = Support.GetCSDeclaration(typeof(T)),
            DefaultValue = defaultValue.ToString(),
         };
      }
      
      public static DependencyPropertyTemplate Create<T>(
         string name,
         string defaultValue)
      {
         return new DependencyPropertyTemplate
         {
            Name = name,
            Type = Support.GetCSDeclaration(typeof(T)),
            DefaultValue = defaultValue,
         };
      }

      public static DependencyPropertyTemplate Create<T>(
         string name,
         DependencyPropertyFlags flags)
      {
         return new DependencyPropertyTemplate
         {
            Name = name,
            Type = Support.GetCSDeclaration(typeof(T)),
            Flags = flags,
         };
      }
      
      public static DependencyPropertyTemplate Create<T>(
         string name,
         T defaultValue,
         DependencyPropertyFlags flags)
      {
         return new DependencyPropertyTemplate
         {
            Name = name,
            Type = Support.GetCSDeclaration(typeof(T)),
            DefaultValue = defaultValue.ToString(),
            Flags = flags,
         };
      }
      
      public static DependencyPropertyTemplate Create<T>(
         string name,
         string defaultValue,
         DependencyPropertyFlags flags)
      {
         return new DependencyPropertyTemplate
         {
            Name = name,
            Type = Support.GetCSDeclaration(typeof(T)),
            DefaultValue = defaultValue,
            Flags = flags,
         };
      }

   }
   
   [Flags]
   public enum DependencyPropertyFlags
   {
      None = 0,
      IsCollection = 1,
      DoNotTrackChanges = 2,
      IsReadOnly = 4,
   }
  
   public class DependencyCommandTemplate
   {
      public string Name { get; set; }
   }
   
   public class DependencyPropertyTemplate
   {
      static bool TestFlags(
         int value,
         int test)
      {
         return (value & test) == test;
      }
      
      public bool IsCollection 
      {
         get
         {
            return TestFlags((int)Flags, (int)DependencyPropertyFlags.IsCollection);
         }
         set
         {
            Flags |= DependencyPropertyFlags.IsCollection;
         }
      }
      
      public bool DoNotTrackChanges 
      {
         get
         {
            return TestFlags((int)Flags, (int)DependencyPropertyFlags.DoNotTrackChanges);
         }
         set
         {
            Flags |= DependencyPropertyFlags.DoNotTrackChanges;
         }
      }

      public bool IsReadOnly 
      {
         get
         {
            return TestFlags((int)Flags, (int)DependencyPropertyFlags.IsReadOnly);
         }
         set
         {
            Flags |= DependencyPropertyFlags.IsReadOnly;
         }
      }
   
   
      public string Name { get; set; }
      public string Type { get; set; }
      public string DefaultValue { get; set; }
      public DependencyPropertyFlags Flags { get; set; }
      public string CompleteType
      {
         get
         {
            if( IsCollection )
            {
               return string.Format("System.Collections.ObjectModel.ObservableCollection<{0}>", Type);
            }
            else
            {
               return Type;
            }
         }
      }
   }
   
   public class DependencyObjectTemplate
   {
      public string Namespace { get; set; }
      public string Name { get; set; }
      public string CompleteName 
      { 
         get
         {
            return string.Format("{0}.{1}", Namespace, Name);
         }
      }
      public string Base { get; set; }
      public DependencyPropertyTemplate[] Properties { get; set; }
      public DependencyCommandTemplate[] Commands { get; set; }
   }
   
   public static class Support
   {
      static readonly CodeDomProvider s_provider = CodeDomProvider.CreateProvider("C#");
      public static string GetCSDeclaration(Type t)
      {
         var reference = new CodeTypeReference(t);
         return s_provider.GetTypeOutput(reference);
      }
  
   }
   
#>