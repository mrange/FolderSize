
/* ****************************************************************************
 *
 * Copyright (c) Mårten Rånge.
 *
 * This source code is subject to terms and conditions of the Microsoft Public License. A 
 * copy of the license can be found in the License.html file at the root of this distribution. If 
 * you cannot locate the  Microsoft Public License, please send an email to 
 * dlr@microsoft.com. By using this source code in any fashion, you are agreeing to be bound 
 * by the terms of the Microsoft Public License.
 *
 * You must not remove this notice, or any other, from this software.
 *
 *
 * ***************************************************************************/

 
using System.Windows;
using FolderSize.Common;

// Do not edit this file. It's auto generated. Changes will be overwritten
// If you need to change it change the template file: DependencyProperties.tt

// These classes are intended to extend already existing classes with DependencyProperties 
// DependencyProperties are aweseome to use but a pain to maintain and write
namespace FolderSize.WPF
{
   partial class FolderTree 
   {
      public static readonly DependencyProperty DisplayModeProperty =
         DependencyProperty.Register(
            "DisplayMode",
            typeof (FolderTreeDisplayMode),
            typeof (FolderSize.WPF.FolderTree),
            new PropertyMetadata(
               FolderTreeDisplayMode.Size,
               OnDisplayModePropertyChanged,
               OnDisplayModePropertyCoerceValue)
            );
      
      partial void OnDisplayModePropertyCoerceValuePartial(
         FolderTreeDisplayMode baseValue,
         ref FolderTreeDisplayMode newValue,
         ref bool isProcessed);
         
      static object OnDisplayModePropertyCoerceValue(
         DependencyObject d,
         object baseValue)
      {
         var instance = (FolderSize.WPF.FolderTree)d;
         if (instance != null)
         {
            var bv = (FolderTreeDisplayMode)baseValue;
            var newValue = default(FolderTreeDisplayMode);
            var isProcessed = false;
            instance.OnDisplayModePropertyCoerceValuePartial(
               bv,
               ref newValue,
               ref isProcessed);
            if (isProcessed)
            {
               return newValue;
            }
            else
            {
               return baseValue; 
            }
         }
         else
         {
            return baseValue;
         }
      }

      partial void OnDisplayModePropertyChangedPartial(
         FolderTreeDisplayMode oldValue,
         FolderTreeDisplayMode newValue);
         
      static void OnDisplayModePropertyChanged(
         DependencyObject d,
         DependencyPropertyChangedEventArgs e)
      {
         var instance = (FolderSize.WPF.FolderTree)d;
         var oldValue = (FolderTreeDisplayMode)e.OldValue;
         var newValue = (FolderTreeDisplayMode)e.NewValue;
         if( instance != null )
         {
            instance.OnDisplayModePropertyChangedPartial(
               oldValue,
               newValue);
         }
      }
         
      /// <summary>
      /// Gets and sets DisplayMode(FolderTreeDisplayMode) (this is a DependencyProperty)
      /// </summary>
      public FolderTreeDisplayMode DisplayMode
      {
         get
         {
            return (FolderTreeDisplayMode)GetValue(DisplayModeProperty);
         }
         set
         {
            if( DisplayMode != value )
            { 
               SetValue(
                  DisplayModeProperty,
                  value);
            }
         }
      }

      static readonly DependencyPropertyKey DisplayModesPropertyKey =
         DependencyProperty.RegisterReadOnly(
            "DisplayModes",
            typeof (FolderTreeDisplayMode[]),
            typeof (FolderSize.WPF.FolderTree),
            new PropertyMetadata(
               GetDefaultDisplayModes ()
               ));

      public static DependencyProperty DisplayModesProperty =
         DisplayModesPropertyKey.DependencyProperty;
         
      /// <summary>
      /// Gets DisplayModes(FolderTreeDisplayMode[]) (this is a DependencyProperty)
      /// </summary>
      public FolderTreeDisplayMode[] DisplayModes
      {
         get
         {
            return (FolderTreeDisplayMode[])GetValue(DisplayModesProperty);
         }
         private set
         {
            if( DisplayModes != value )
            { 
               SetValue(
                  DisplayModesPropertyKey,
                  value);
            }
         
         }
      }
         
      public static readonly DependencyProperty JobProperty =
         DependencyProperty.Register(
            "Job",
            typeof (FolderTraverserJob),
            typeof (FolderSize.WPF.FolderTree),
            new PropertyMetadata(
               null,
               OnJobPropertyChanged,
               OnJobPropertyCoerceValue)
            );
      
      partial void OnJobPropertyCoerceValuePartial(
         FolderTraverserJob baseValue,
         ref FolderTraverserJob newValue,
         ref bool isProcessed);
         
      static object OnJobPropertyCoerceValue(
         DependencyObject d,
         object baseValue)
      {
         var instance = (FolderSize.WPF.FolderTree)d;
         if (instance != null)
         {
            var bv = (FolderTraverserJob)baseValue;
            var newValue = default(FolderTraverserJob);
            var isProcessed = false;
            instance.OnJobPropertyCoerceValuePartial(
               bv,
               ref newValue,
               ref isProcessed);
            if (isProcessed)
            {
               return newValue;
            }
            else
            {
               return baseValue; 
            }
         }
         else
         {
            return baseValue;
         }
      }

      partial void OnJobPropertyChangedPartial(
         FolderTraverserJob oldValue,
         FolderTraverserJob newValue);
         
      static void OnJobPropertyChanged(
         DependencyObject d,
         DependencyPropertyChangedEventArgs e)
      {
         var instance = (FolderSize.WPF.FolderTree)d;
         var oldValue = (FolderTraverserJob)e.OldValue;
         var newValue = (FolderTraverserJob)e.NewValue;
         if( instance != null )
         {
            instance.OnJobPropertyChangedPartial(
               oldValue,
               newValue);
         }
      }
         
      /// <summary>
      /// Gets and sets Job(FolderTraverserJob) (this is a DependencyProperty)
      /// </summary>
      public FolderTraverserJob Job
      {
         get
         {
            return (FolderTraverserJob)GetValue(JobProperty);
         }
         set
         {
            if( Job != value )
            { 
               SetValue(
                  JobProperty,
                  value);
            }
         }
      }

      static readonly DependencyPropertyKey ProgressInfoPropertyKey =
         DependencyProperty.RegisterReadOnly(
            "ProgressInfo",
            typeof (string),
            typeof (FolderSize.WPF.FolderTree),
            new PropertyMetadata(
               "FolderSize.WPF"
               ));

      public static DependencyProperty ProgressInfoProperty =
         ProgressInfoPropertyKey.DependencyProperty;
         
      /// <summary>
      /// Gets ProgressInfo(string) (this is a DependencyProperty)
      /// </summary>
      public string ProgressInfo
      {
         get
         {
            return (string)GetValue(ProgressInfoProperty);
         }
         private set
         {
            if( ProgressInfo != value )
            { 
               SetValue(
                  ProgressInfoPropertyKey,
                  value);
            }
         
         }
      }
         
   }
}
